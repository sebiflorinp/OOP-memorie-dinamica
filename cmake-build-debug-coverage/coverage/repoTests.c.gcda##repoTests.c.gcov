        -:    0:Source:/home/sebifp/lab2-4-dinamic-refacut/tests/repoTests.c
        -:    0:Graph:/home/sebifp/lab2-4-dinamic-refacut/cmake-build-debug-coverage/CMakeFiles/lab2_4_dinamic_refacut.dir/tests/repoTests.c.gcno
        -:    0:Data:/home/sebifp/lab2-4-dinamic-refacut/cmake-build-debug-coverage/CMakeFiles/lab2_4_dinamic_refacut.dir/tests/repoTests.c.gcda
        -:    0:Runs:1
        -:    1:#include "repoTests.h"
        -:    2:#include "assert.h"
        -:    3:#include "../domain/models.h"
        -:    4:#include "../repos/repos.h"
        -:    5:
function testAddProductRepo called 1 returned 100% blocks executed 75%
        1:    6:void testAddProductRepo() {
        -:    7:    // Arrange
        1:    8:    ProductsRepo* repo = createRepo();
        1:    8-block  0
call    0 returned 1
        1:    9:    Product* newProduct = createProduct(1, "Computer", "AAAA", "Aaaa", 12, 12);
call    0 returned 1
        1:   10:    Product* newProduct1 = createProduct(2, "Computer", "AAAA", "Aaaa", 12, 12);
call    0 returned 1
        -:   11:
        -:   12:    //Act
        1:   13:    bool actual1 = addProductRepo(repo, newProduct);
call    0 returned 1
        1:   14:    bool actual2 = addProductRepo(repo, newProduct);
call    0 returned 1
        1:   15:    bool actual3 = addProductRepo(repo, newProduct1);
call    0 returned 1
        -:   16:
        -:   17:    // Assert
       1*:   18:    assert(repo->products[0]->id == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   18-block  0
call    2 never executed
       1*:   19:    assert(actual1 == true);
        1:   19-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   19-block  1
call    2 never executed
       1*:   20:    assert(actual2 == false);
        1:   20-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   20-block  1
call    2 never executed
       1*:   21:    assert(actual3 == true);
        1:   21-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   21-block  1
call    2 never executed
        -:   22:
        -:   23:    // Cleanup
        1:   24:    destroyRepo(repo);
        1:   24-block  0
call    0 returned 1
        1:   25:}
        -:   26:
function testUpdateProductRepo called 1 returned 100% blocks executed 82%
        1:   27:void testUpdateProductRepo() {
        -:   28:    // Arrange
        1:   29:    ProductsRepo* repo = createRepo();
        1:   29-block  0
call    0 returned 1
        1:   30:    Product* newProduct = createProduct(1, "Computer", "AAAA", "Aaaa", 12, 12);
call    0 returned 1
        1:   31:    addProductRepo(repo, newProduct);
call    0 returned 1
        -:   32:
        -:   33:    // Arrange
        1:   34:    bool actual1 = updateProductRepo(repo, 1, 30, 30);
call    0 returned 1
        1:   35:    bool actual2 = updateProductRepo(repo, 2, 30,30);
call    0 returned 1
        -:   36:
        -:   37:    // Assert
       1*:   38:    assert(actual1 == true);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   38-block  0
call    2 never executed
       1*:   39:    assert(actual2 == false);
        1:   39-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   39-block  1
call    2 never executed
        -:   40:
        -:   41:    // Cleanup
        1:   42:    destroyRepo(repo);
        1:   42-block  0
call    0 returned 1
        1:   43:}
        -:   44:
function testDeleteProductRepo called 1 returned 100% blocks executed 76%
        1:   45:void testDeleteProductRepo() {
        -:   46:    // Arrange
        1:   47:    ProductsRepo* repo = createRepo();
        1:   47-block  0
call    0 returned 1
        1:   48:    Product* product1 = createProduct(1, "Computer", "AAAA", "Aaaa", 12, 12);
call    0 returned 1
        1:   49:    addProductRepo(repo, product1);
call    0 returned 1
        1:   50:    Product* product2 = createProduct(2, "Computer", "AAAA", "Aaa", 12, 12);
call    0 returned 1
        1:   51:    addProductRepo(repo, product2);
call    0 returned 1
        -:   52:
        -:   53:    // Act
        1:   54:    bool actual1 = deleteProductRepo(repo, 1);
call    0 returned 1
        1:   55:    bool actual2 = deleteProductRepo(repo, 1);
call    0 returned 1
        -:   56:
        -:   57:    // Assert
       1*:   58:    assert(actual1 == true);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   58-block  0
call    2 never executed
       1*:   59:    assert(actual2 == false);
        1:   59-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   59-block  1
call    2 never executed
       1*:   60:    assert(repo->products[0]->id == 2);
        1:   60-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   60-block  1
call    2 never executed
       1*:   61:    assert(repo->numberOfProducts == 1);
        1:   61-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   61-block  1
call    2 never executed
        -:   62:
        -:   63:    // Cleanup
        1:   64:    destroyRepo(repo);
        1:   64-block  0
call    0 returned 1
        1:   65:}
