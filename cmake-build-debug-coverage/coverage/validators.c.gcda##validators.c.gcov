        -:    0:Source:/home/sebifp/lab2-4-dinamic-refacut/domain/validators.c
        -:    0:Graph:/home/sebifp/lab2-4-dinamic-refacut/cmake-build-debug-coverage/CMakeFiles/lab2_4_dinamic_refacut.dir/domain/validators.c.gcno
        -:    0:Data:/home/sebifp/lab2-4-dinamic-refacut/cmake-build-debug-coverage/CMakeFiles/lab2_4_dinamic_refacut.dir/domain/validators.c.gcda
        -:    0:Runs:1
        -:    1:#include <string.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <stdio.h>
        -:    4:#include "validators.h"
        -:    5:
        -:    6:/*
        -:    7: * Checks if the received id is valid.
        -:    8: * Preconditions: id: a pointer to a char
        -:    9: * Post-conditions: a boolean
        -:   10: */
function validateId called 3 returned 100% blocks executed 100%
        3:   11:bool validateId(char* id) {
        -:   12:    // check if the string is not an empty string
        3:   13:    if (strlen(id) == 0) {
        3:   13-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   14:        return false;
        1:   14-block  0
        -:   15:    }
        -:   16:    // check if the array contains only numbers
        5:   17:    for (unsigned int i = 0; i < strlen(id); i++) {
        2:   17-block  0
        3:   17-block  1
        5:   17-block  2
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:   18:        if (!('0' <= id[i] && id[i] <= '9')) {
        4:   18-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   18-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 3
        1:   19:            return false;
        1:   19-block  0
        -:   20:        }
        -:   21:    }
        -:   22:
        1:   23:    return true;
        1:   23-block  0
        -:   24:}
        -:   25:
        -:   26:/*
        -:   27: * Checks if the received type is valid
        -:   28: * Preconditions: type: a pointer to a char
        -:   29: * Post-conditions: a boolean
        -:   30: */
function validateType called 2 returned 100% blocks executed 100%
        2:   31:bool validateType(char* type) {
        -:   32:    // check if the type is one of the following: Fridge, Computer, Laptop
        2:   33:    if (!(strcmp(type, "Fridge") == 0 || strcmp(type, "Computer") == 0 || strcmp(type, "Laptop") == 0)) {
        2:   33-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   33-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:   33-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:   34:        return false;
        1:   34-block  0
        -:   35:    }
        -:   36:
        1:   37:    return true;
        1:   37-block  0
        -:   38:}
        -:   39:
        -:   40:/*
        -:   41: * Checks if the received manufacturer is valid
        -:   42: * Preconditions: manufacturer: a pointer to a char
        -:   43: * Post-conditions: a boolean
        -:   44: */
function validateManufacturer called 3 returned 100% blocks executed 93%
        3:   45:bool validateManufacturer(char* manufacturer) {
        -:   46:    // check if the manufacturer is not an empty string
        3:   47:    if (strlen(manufacturer) == 0) {
        3:   47-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   48:        return false;
        1:   48-block  0
        -:   49:    }
        -:   50:
        -:   51:    // check if the manufacturer is made only of letters and numbers
       14:   52:    for (unsigned int i = 0; i < strlen(manufacturer); i++) {
        2:   52-block  0
       12:   52-block  1
       14:   52-block  2
branch  0 taken 13
branch  1 taken 1 (fallthrough)
       24:   53:        if (!(
       13:   54:                ('0' <= manufacturer[i] && manufacturer[i] <='9') ||
       13:   54-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 0
       13:   54-block  1
branch  2 taken 11 (fallthrough)
branch  3 taken 2
      11*:   55:                ('a' <= manufacturer[i] && manufacturer[i] <='z') ||
       11:   55-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    %%%%%:   55-block  1
branch  2 never executed
branch  3 never executed
       11:   56:                ('A' <=manufacturer[i] && manufacturer[i] <= 'Z')
       11:   56-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 1
       10:   56-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 10
        -:   57:                )) {
        1:   58:            return false;
        1:   58-block  0
        -:   59:        }
        -:   60:    }
        -:   61:
        1:   62:    return true;
        1:   62-block  0
        -:   63:}
        -:   64:
        -:   65:/*
        -:   66: * Checks if the received model is valid
        -:   67: * Preconditions: a pointer to a char
        -:   68: * Post-conditions: a boolean
        -:   69: */
function validateModel called 3 returned 100% blocks executed 93%
        3:   70:bool validateModel(char* model) {
        -:   71:    // check if the string is not an empty string
        3:   72:    if (strlen(model) == 0) {
        3:   72-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   73:        return false;
        1:   73-block  0
        -:   74:    }
        -:   75:
        -:   76:    // check if the model is made only of numbers and letters
       11:   77:    for (unsigned int i = 0; i < strlen(model); i++) {
        2:   77-block  0
        9:   77-block  1
       11:   77-block  2
branch  0 taken 10
branch  1 taken 1 (fallthrough)
       15:   78:        if (!(
       10:   79:                ('0' <= model[i] && model[i] <='9') ||
       10:   79-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10:   79-block  1
branch  2 taken 5 (fallthrough)
branch  3 taken 5
       5*:   80:                ('a' <= model[i] && model[i] <='z') ||
        5:   80-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%:   80-block  1
branch  2 never executed
branch  3 never executed
        5:   81:                ('A' <=model[i] && model[i] <= 'Z')
        5:   81-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        4:   81-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
        -:   82:                )) {
        1:   83:            return false;
        1:   83-block  0
        -:   84:        }
        -:   85:    }
        -:   86:
        1:   87:    return true;
        1:   87-block  0
        -:   88:}
        -:   89:
        -:   90:/*
        -:   91: * Checks if the received price is valid
        -:   92: * Preconditions: price: a pointer to a char
        -:   93: * Post-conditions: a boolean
        -:   94: */
function validatePrice called 4 returned 100% blocks executed 100%
        4:   95:bool validatePrice(char* price) {
        -:   96:    // check if the string is not an empty string
        4:   97:    if (strlen(price) == 0) {
        4:   97-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:   98:        return false;
        1:   98-block  0
        -:   99:    }
        -:  100:    // check if the string is only made of numbers and no more than one '.'
        3:  101:    int dotCounter = 0;
       18:  102:    for (unsigned int i = 0; i < strlen(price); i++) {
        3:  102-block  0
       15:  102-block  1
       18:  102-block  2
branch  0 taken 16
branch  1 taken 2 (fallthrough)
       16:  103:        if (price[i] == '.') {
       16:  103-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 12
        4:  104:            dotCounter++;
        4:  104-block  0
        -:  105:        } else
       12:  106:            if (!('0' <= price[i] && price[i] <= '9')) {
       12:  106-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 1
       11:  106-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 11
        1:  107:                return false;
        1:  107-block  0
        -:  108:            }
        -:  109:    }
        2:  110:    if (dotCounter > 1) {
        2:  110-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  111:        return false;
        1:  111-block  0
        -:  112:    }
        -:  113:
        1:  114:    return true;
        1:  114-block  0
        -:  115:}
        -:  116:
        -:  117:/*
        -:  118: * Checks if the received quantity is valid
        -:  119: * Preconditions: quantity: a pointer to a char
        -:  120: * Post-conditions: a boolean
        -:  121: */
function validateQuantity called 3 returned 100% blocks executed 100%
        3:  122:bool validateQuantity(char* quantity) {
        -:  123:    // check if the string is not an empty string
        3:  124:    if (strlen(quantity) == 0) {
        3:  124-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  125:        return false;
        1:  125-block  0
        -:  126:    }
        -:  127:
        -:  128:    // check if the string is only made of numbers
        4:  129:    for (unsigned int i = 0; i < strlen(quantity); i++) {
        2:  129-block  0
        2:  129-block  1
        4:  129-block  2
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:  130:        if (!('0' <= quantity[i] && quantity[i] <= '9')) {
        3:  130-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  130-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
        1:  131:            return false;
        1:  131-block  0
        -:  132:        }
        -:  133:    }
        -:  134:
        1:  135:    return true;
        1:  135-block  0
        -:  136:}
        -:  137:
        -:  138:/*
        -:  139: * Checks if the received option is valid.
        -:  140: * Preconditions: option: a pointer to a char
        -:  141: * Post-conditions: a boolean
        -:  142: */
function validateOption called 5 returned 100% blocks executed 100%
        5:  143:bool validateOption(char* option) {
        -:  144:    // check if the string is an empty string
        5:  145:    if (strlen(option) == 0) {
        5:  145-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:  146:        return false;
        1:  146-block  0
        -:  147:    }
        -:  148:
        -:  149:    // check if the string is only made of numbers
        9:  150:    for (unsigned int i = 0; i < strlen(option); i++) {
        4:  150-block  0
        5:  150-block  1
        9:  150-block  2
branch  0 taken 6
branch  1 taken 3 (fallthrough)
        6:  151:        if (!('0' <= option[i] && option[i] <= '9')) {
        6:  151-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  151-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 5
        1:  152:            return false;
        1:  152-block  0
        -:  153:        }
        -:  154:    }
        -:  155:
        -:  156:    // check if the option is between 1 and 6
        3:  157:    if (!(1 <= atoi(option) && atoi(option) <= 6)) {
        3:  157-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  157-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1:  158:        return false;
        1:  158-block  0
        -:  159:    }
        -:  160:
        2:  161:    return true;
        2:  161-block  0
        -:  162:}
