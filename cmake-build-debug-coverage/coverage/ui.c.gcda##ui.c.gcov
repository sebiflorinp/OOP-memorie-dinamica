        -:    0:Source:/home/sebifp/lab2-4-dinamic-refacut/ui/ui.c
        -:    0:Graph:/home/sebifp/lab2-4-dinamic-refacut/cmake-build-debug-coverage/CMakeFiles/lab2_4_dinamic_refacut.dir/ui/ui.c.gcno
        -:    0:Data:/home/sebifp/lab2-4-dinamic-refacut/cmake-build-debug-coverage/CMakeFiles/lab2_4_dinamic_refacut.dir/ui/ui.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdbool.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:#include "ui.h"
        -:    6:#include "../domain/validators.h"
        -:    7:#include "../controllers/controllers.h"
        -:    8:#include "../utils/utils.h"
        -:    9:#include "../repos/repos.h"
        -:   10:
function app called 1 returned 100% blocks executed 13%
        1:   11:void app() {
        1:   12:    printf("This is a electronics store shop.\n");
        1:   12-block  0
call    0 returned 1
        -:   13:
        1:   14:    bool running = true;
        1:   15:    ProductsRepo* productsRepo= createRepo();
call    0 returned 1
        -:   16:    // needed for fgets to pause the execution of the program
        -:   17:    char dummyInput[100];
        2:   18:    while (running) {
        2:   18-block  0
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:   19:        printf(
        1:   19-block  0
call    0 returned 1
        -:   20:            "Choose one of the following commands:\n"
        -:   21:           "  1. Add new product.\n"
        -:   22:           "  2. Update product.\n"
        -:   23:           "  3. Delete product.\n"
        -:   24:           "  4. Display available products.\n"
        -:   25:           "  5. Display products filtered by a certain criteria.\n"
        -:   26:           "  6. Exit the application.\n"
        -:   27:           );
        1:   28:        char* option = getInput();
call    0 returned 1
        1:   29:        if (validateOption(option)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   30:            switch (atoi(option)) {
        1:   30-block  0
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 1
branch  6 taken 0
        -:   31:                // add new product feature
    #####:   32:                case 1:
        -:   33:                    // get type
    #####:   34:                    printf("Input the type of the product, the product can be a Laptop, a Computer or a Fridge.\n");
    %%%%%:   34-block  0
call    0 never executed
    #####:   35:                    char* type = getInput();
call    0 never executed
        -:   36:
        -:   37:                    // get id for new product
    #####:   38:                    int id = getIdForNewProduct(productsRepo);
call    0 never executed
        -:   39:
        -:   40:                    // get manufacturer
    #####:   41:                    printf("Input the manufacturer of the product.\n");
call    0 never executed
    #####:   42:                    char* manufacturer = getInput();
call    0 never executed
        -:   43:
        -:   44:                    // get model
    #####:   45:                    printf("Input the model of the product.\n");
call    0 never executed
    #####:   46:                    char* model = getInput();
call    0 never executed
        -:   47:
        -:   48:                    // get price
    #####:   49:                    printf("Input the price of the product.\n");
call    0 never executed
    #####:   50:                    char* price = getInput();
call    0 never executed
        -:   51:
        -:   52:                    // get quantity
    #####:   53:                    printf("Input the quantity of the product.\n");
call    0 never executed
    #####:   54:                    char* quantity = getInput();
call    0 never executed
        -:   55:
        -:   56:                    // check if the input data is valid
    #####:   57:                    if (
branch  0 never executed
branch  1 never executed
    #####:   58:                            validateType(type) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:                            validateManufacturer(manufacturer) &&
    %%%%%:   59-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:                            validateModel(model) &&
    %%%%%:   60-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   61:                            validatePrice(price) &&
    %%%%%:   61-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:                            validateQuantity(quantity)
    %%%%%:   62-block  0
call    0 never executed
    #####:   63:                            ) {
    %%%%%:   63-block  0
        -:   64:                        // add the product if the data is valid
    #####:   65:                        bool result = addProductController(productsRepo, id, type, manufacturer, model, price, quantity);
    %%%%%:   65-block  0
call    0 never executed
    #####:   66:                        if (result) {
branch  0 never executed
branch  1 never executed
    #####:   67:                            printf("The product was added successfully.\n");
    %%%%%:   67-block  0
call    0 never executed
        -:   68:                        } else {
    #####:   69:                            printf("The product was not added.\n");
    %%%%%:   69-block  0
call    0 never executed
        -:   70:                        }
        -:   71:
        -:   72:                    } else {
    #####:   73:                        printf("The input data is invalid.\n");
    %%%%%:   73-block  0
call    0 never executed
        -:   74:                    }
    #####:   75:                    free(type);
    #####:   76:                    free(manufacturer);
    #####:   77:                    free(model);
    #####:   78:                    free(price);
    #####:   79:                    free(quantity);
    #####:   80:                    break;
    %%%%%:   80-block  0
        -:   81:                // update product
    #####:   82:                case 2:
        -:   83:                    // check if there are any products to update
    #####:   84:                    if (productsRepo->numberOfProducts == 0) {
    %%%%%:   84-block  0
branch  0 never executed
branch  1 never executed
    #####:   85:                        printf("There are no products to update.\n");
    %%%%%:   85-block  0
call    0 never executed
        -:   86:                    } else {
        -:   87:                        // display products and get the id
    #####:   88:                        printf("Input the id of the product that will be updated.\n");
    %%%%%:   88-block  0
call    0 never executed
    #####:   89:                        displayProducts(productsRepo);
call    0 never executed
    #####:   90:                        char* idChar = getInput();
call    0 never executed
        -:   91:
        -:   92:                        // get the new price
    #####:   93:                        printf("Input the updated price of the chosen product.\n");
call    0 never executed
    #####:   94:                        char* newPrice = getInput();
call    0 never executed
        -:   95:
        -:   96:                        // get the new quantity
    #####:   97:                        printf("Input the updated quantity of the chosen product\n");
call    0 never executed
    #####:   98:                        char* newQuantity = getInput();
call    0 never executed
        -:   99:
        -:  100:                        // check if the input is valid and if it is attempt the update
    #####:  101:                        if (validatePrice(newPrice) && validateQuantity(newQuantity)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  101-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  102:                            bool result = updateProductController(
        -:  103:                                    productsRepo,
        -:  104:                                    atoi(idChar),
        -:  105:                                    atoi(newQuantity),
    #####:  106:                                    atof(newPrice)
    %%%%%:  106-block  0
call    0 never executed
        -:  107:                                    );
    #####:  108:                            if (!result) {
branch  0 never executed
branch  1 never executed
    #####:  109:                                printf("The update was unsuccessful\n");
    %%%%%:  109-block  0
call    0 never executed
        -:  110:                            } else {
    #####:  111:                                printf("The update was successful\n");
    %%%%%:  111-block  0
call    0 never executed
        -:  112:                            }
        -:  113:                        }
    #####:  114:                        free(idChar);
    #####:  115:                        free(newPrice);
    #####:  116:                        free(newQuantity);
    %%%%%:  116-block  0
        -:  117:                    }
    #####:  118:                    break;
    %%%%%:  118-block  0
        -:  119:                // delete product
    #####:  120:                case 3:
        -:  121:                    // check if there are any products to display
    #####:  122:                    if (productsRepo->numberOfProducts == 0) {
    %%%%%:  122-block  0
branch  0 never executed
branch  1 never executed
    #####:  123:                        printf("There are no products to delete.\n");
    %%%%%:  123-block  0
call    0 never executed
        -:  124:                    } else {
        -:  125:                        // display the products and obtain the id of the product that will be deleted
    #####:  126:                        printf("Input the id of the product that will be deleted.\n");
    %%%%%:  126-block  0
call    0 never executed
    #####:  127:                        displayProducts(productsRepo);
call    0 never executed
    #####:  128:                        char* idChar = getInput();
call    0 never executed
        -:  129:
        -:  130:                        // attempt to delete the product with the input id
    #####:  131:                        if (validateId(idChar)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  132:                            bool result = deleteProductController(productsRepo, atoi(idChar));
    %%%%%:  132-block  0
call    0 never executed
    #####:  133:                            if (result) {
branch  0 never executed
branch  1 never executed
    #####:  134:                                printf("The selected product was deleted successfully.\n");
    %%%%%:  134-block  0
call    0 never executed
        -:  135:                            } else {
    #####:  136:                                printf("The deletion was unsuccessful.\n");
    %%%%%:  136-block  0
call    0 never executed
        -:  137:                            }
        -:  138:                        } else {
    #####:  139:                            printf("The input id was invalid.\n");
    %%%%%:  139-block  0
call    0 never executed
        -:  140:                        }
    #####:  141:                        free(idChar);
    %%%%%:  141-block  0
        -:  142:                    }
    #####:  143:                    break;
    %%%%%:  143-block  0
    #####:  144:                case 4:
        -:  145:                    // get the ordering of the list
    #####:  146:                    printf("Input the ordering of the available products: ascending / descending\n");
    %%%%%:  146-block  0
call    0 never executed
    #####:  147:                    char* ordering = getInput();
call    0 never executed
        -:  148:
        -:  149:                    // check if the input is valid
    #####:  150:                    if (strcmp(ordering, "ascending") == 0 || strcmp(ordering, "descending") == 0) {
branch  0 never executed
branch  1 never executed
    %%%%%:  150-block  0
branch  2 never executed
branch  3 never executed
        -:  151:                        ProductsRepo* result;
    #####:  152:                        if(strcmp(ordering, "ascending") == 0) {
    %%%%%:  152-block  0
branch  0 never executed
branch  1 never executed
    #####:  153:                             result = getAvailableProducts(productsRepo,
    %%%%%:  153-block  0
call    0 never executed
        -:  154:                                                                 compareProductsInAscendantOrder);
        -:  155:                        } else {
    #####:  156:                            result = getAvailableProducts(productsRepo,
    %%%%%:  156-block  0
call    0 never executed
        -:  157:                                                                        compareProductsInDescendantOrder);
        -:  158:                        }
        -:  159:                        // display a table if there are any products available, otherwise show a message
    #####:  160:                        if (result->numberOfProducts > 0) {
    %%%%%:  160-block  0
branch  0 never executed
branch  1 never executed
    #####:  161:                            displayProducts(result);
    %%%%%:  161-block  0
call    0 never executed
        -:  162:                        } else {
    #####:  163:                            printf("There are no products available.\n");
    %%%%%:  163-block  0
call    0 never executed
        -:  164:                        }
    #####:  165:                        if (result->numberOfProducts != 0) {
    %%%%%:  165-block  0
branch  0 never executed
branch  1 never executed
    #####:  166:                            free(result->products);
    %%%%%:  166-block  0
        -:  167:                        }
    #####:  168:                        free(result);
    %%%%%:  168-block  0
        -:  169:                    } else {
    #####:  170:                        printf("The input ordering is invalid.\n");
    %%%%%:  170-block  0
call    0 never executed
        -:  171:                    }
    #####:  172:                    free(ordering);
    #####:  173:                    break;
    %%%%%:  173-block  0
    #####:  174:                case 5:
        -:  175:                    // get the criteria
    #####:  176:                    printf("Input the criteria by which the products will be filtered: manufacturer / price / quantity\n");
    %%%%%:  176-block  0
call    0 never executed
    #####:  177:                    char* criteria = getInput();
call    0 never executed
        -:  178:
        -:  179:                    // check if the input is valid
    #####:  180:                    if (
    #####:  181:                            strcmp(criteria, "manufacturer") == 0 ||
branch  0 never executed
branch  1 never executed
    #####:  182:                            strcmp(criteria, "price") == 0 ||
    %%%%%:  182-block  0
branch  0 never executed
branch  1 never executed
    #####:  183:                            strcmp(criteria, "quantity") == 0
    %%%%%:  183-block  0
branch  0 never executed
branch  1 never executed
    #####:  184:                            ) {
        -:  185:                        // get the value by which the products should be filtered
        -:  186:                        char* valueToFilterBy;
        -:  187:                        ProductsRepo* result;
    #####:  188:                        if (strcmp(criteria, "manufacturer") == 0) {
    %%%%%:  188-block  0
branch  0 never executed
branch  1 never executed
    #####:  189:                            printf("Input the manufacturer of the product.\n");
    %%%%%:  189-block  0
call    0 never executed
    #####:  190:                            valueToFilterBy = getInput();
call    0 never executed
        -:  191:
        -:  192:                            // check if the manufacturer is valid
    #####:  193:                            if (validateManufacturer(valueToFilterBy)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  194:                                // get the number of filtered products and the result
    #####:  195:                                result = getProductsFiltered(productsRepo, compareManufacturers, valueToFilterBy);
    %%%%%:  195-block  0
call    0 never executed
        -:  196:                            } else {
    #####:  197:                                printf("The input manufacturer is invalid.\n");
    %%%%%:  197-block  0
call    0 never executed
        -:  198:                            }
    #####:  199:                        } else if (strcmp(criteria, "price") == 0) {
    %%%%%:  199-block  0
branch  0 never executed
branch  1 never executed
    #####:  200:                            printf("Input the price of the product.\n");
    %%%%%:  200-block  0
call    0 never executed
    #####:  201:                            valueToFilterBy = getInput();
call    0 never executed
        -:  202:
        -:  203:                            // check if the price is valid
    #####:  204:                            if (validatePrice(valueToFilterBy)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  205:                                // get the number of filtered products and the result
    #####:  206:                                result = getProductsFiltered(productsRepo, comparePrice, valueToFilterBy);
    %%%%%:  206-block  0
call    0 never executed
        -:  207:                            } else {
    #####:  208:                                printf("The input price is invalid.\n");
    %%%%%:  208-block  0
call    0 never executed
        -:  209:                            }
    #####:  210:                        } else if (strcmp(criteria, "quantity") == 0) {
    %%%%%:  210-block  0
branch  0 never executed
branch  1 never executed
    #####:  211:                            printf("Input the quantity of the product.\n");
    %%%%%:  211-block  0
call    0 never executed
    #####:  212:                            valueToFilterBy = getInput();
call    0 never executed
        -:  213:
        -:  214:                            // check if the quantity is valid
    #####:  215:                            if (validateQuantity(valueToFilterBy)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  216:                                // get the number of filtered products and the result
    #####:  217:                                result = getProductsFiltered(productsRepo, compareQuantity, valueToFilterBy);
    %%%%%:  217-block  0
call    0 never executed
        -:  218:                            } else {
    #####:  219:                                printf("The input quantity is invalid.\n");
    %%%%%:  219-block  0
call    0 never executed
        -:  220:                            }
        -:  221:                        }
    #####:  222:                        free(valueToFilterBy);
        -:  223:                        // display a message if there are no products after the filtering and display the remaining ones otherwise
    #####:  224:                        if (result->numberOfProducts == 0) {
    %%%%%:  224-block  0
branch  0 never executed
branch  1 never executed
    #####:  225:                            printf("There are no products after the filtering.\n");
    %%%%%:  225-block  0
call    0 never executed
        -:  226:                        } else {
    #####:  227:                            displayProducts(result);
    %%%%%:  227-block  0
call    0 never executed
        -:  228:                        }
    #####:  229:                        if (result->numberOfProducts != 0) {
    %%%%%:  229-block  0
branch  0 never executed
branch  1 never executed
    #####:  230:                            free(result->products);
    %%%%%:  230-block  0
        -:  231:                        }
    #####:  232:                        free(result);
    %%%%%:  232-block  0
        -:  233:                    } else {
    #####:  234:                        printf("The input criteria is invalid.\n");
    %%%%%:  234-block  0
call    0 never executed
        -:  235:                    }
    #####:  236:                    free(criteria);
    #####:  237:                    break;
    %%%%%:  237-block  0
        1:  238:                case 6:
        1:  239:                    running = false;
        1:  240:                    printf("Thank you for using this application.\n");
        1:  240-block  0
call    0 returned 1
        1:  241:                    break;
        -:  242:            }
        1:  243:            printf("Press ENTER to continue.\n");
        1:  243-block  0
call    0 returned 1
        1:  244:            fgets(dummyInput, 100, stdin);
call    0 returned 1
        -:  245:
        -:  246:        }
        1:  247:        free(option);
        1:  247-block  0
        -:  248:    }
        1:  249:    destroyRepo(productsRepo);
        1:  249-block  0
call    0 returned 1
        1:  250:}
        -:  251:
function displayProducts called 0 returned 0% blocks executed 0%
    #####:  252:void displayProducts(ProductsRepo* repo) {
    #####:  253:    printf("+----------+--------------+------------------------+------------------------+---------------+---------------+\n");
    %%%%%:  253-block  0
call    0 never executed
    #####:  254:    printf("|  %-6s  |  %-10s  |  %-20s  |  %-20s  |  %-11s  |  %-11s  |\n", "Id", "Type", "Manufacturer", "Model", "Price", "Quantity");
call    0 never executed
    #####:  255:    printf("+----------+--------------+------------------------+------------------------+---------------+---------------+\n");
call    0 never executed
    #####:  256:    for (int i = 0; i < repo->numberOfProducts; i++) {
    %%%%%:  256-block  0
branch  0 never executed
branch  1 never executed
    #####:  257:        printf(
        -:  258:                "|  %-6d  |  %-10s  |  %-20s  |  %-20s  |  %-11f  |  %-11d  |\n",
    #####:  259:                repo->products[i]->id,
    #####:  260:                repo->products[i]->type,
    #####:  261:                repo->products[i]->manufacturer,
    #####:  262:                repo->products[i]->model,
    #####:  263:                repo->products[i]->price,
    #####:  264:                repo->products[i]->quantity
    %%%%%:  264-block  0
call    0 never executed
        -:  265:                );
    #####:  266:        printf("+----------+--------------+------------------------+------------------------+---------------+---------------+\n");
call    0 never executed
        -:  267:    }
    #####:  268:    if (repo->numberOfProducts == 0) {
    %%%%%:  268-block  0
branch  0 never executed
branch  1 never executed
    #####:  269:        printf("|  %-6s  |  %-10s  |  %-20s  |  %-20s  |  %-11s  |  %-11s  |\n", " ", " ", " ", " ", " ", " ");
    %%%%%:  269-block  0
call    0 never executed
    #####:  270:        printf("+----------+--------------+------------------------+------------------------+---------------+---------------+\n");
call    0 never executed
        -:  271:
        -:  272:    }
    #####:  273:}
        -:  274:
        -:  275:/*
        -:  276: * A function that removes the trailing new line from fgets.
        -:  277: * Preconditions: string: a pointer to a char array
        -:  278: * Post-conditions: -
        -:  279: */
function removeTrailingNewLine called 1 returned 100% blocks executed 100%
        1:  280:void removeTrailingNewLine(char* string) {
        1:  281:    if (strlen(string) > 0) {
        1:  281-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  282:        string[strlen(string) - 1] = '\0';
        1:  282-block  0
        -:  283:    }
        1:  284:}
        -:  285:
function getInput called 1 returned 100% blocks executed 100%
        1:  286:char* getInput() {
        -:  287:    // get the input from the user
        1:  288:    char* input = malloc(sizeof(char) * 20);
        1:  289:    fgets(input, 20, stdin);
        1:  289-block  0
call    0 returned 1
        1:  290:    removeTrailingNewLine(input);
call    0 returned 1
        -:  291:
        -:  292:    // return a pointer to the input
        1:  293:    return input;
        -:  294:}
